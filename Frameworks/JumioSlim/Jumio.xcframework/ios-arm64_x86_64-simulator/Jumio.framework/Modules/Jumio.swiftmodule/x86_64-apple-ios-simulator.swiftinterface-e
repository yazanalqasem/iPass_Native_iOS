// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Jumio
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import Foundation
@_exported import Jumio
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
extension Jumio {
  public struct Theme {
    public struct Value {
      public init(light: UIColor, dark: UIColor)
      public init(_ standard: UIColor)
    }
    public init()
    public var primaryButton: Jumio.Jumio.Theme.PrimaryButton
    public var secondaryButton: Jumio.Jumio.Theme.SecondaryButton
    public var scanOverlay: Jumio.Jumio.Theme.ScanOverlay
    public var scanView: Jumio.Jumio.Theme.ScanView
    public var loading: Jumio.Jumio.Theme.Loading
    public var bubble: Jumio.Jumio.Theme.Bubble
    public var searchBubble: Jumio.Jumio.Theme.SearchBubble
    public var iProov: Jumio.Jumio.Theme.IProov
    public var nfc: Jumio.Jumio.Theme.NFC
    public var confirmation: Jumio.Jumio.Theme.Confirmation
    public var scanHelp: Jumio.Jumio.Theme.ScanHelp
    public var background: Value?
    public var primaryColor: Value?
    public var textForegroundColor: Value?
    public var navigationIconColor: Value?
  }
}
extension Jumio {
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class IDCredential : Credential {
    @available(*, deprecated, message: "Use `Jumio.IDCredential.supportedCountries` together with `Jumio.IDCredential.physicalDocuments(for:)` and `Jumio.IDCredential.digitalDocuments(for:)` instead")
    public var countries: [String : [Jumio.Document]] {
      get
    }
    public var supportedCountries: [String] {
      get
    }
    public var suggestedCountry: String? {
      get
    }
    public func isSupportedConfiguration(country: String, document: Jumio.Document) -> Bool
    public func setConfiguration(country: String, document: Jumio.Document)
    public func physicalDocuments(for country: String) -> [Jumio.Document.Physical]
    public func digitalDocuments(for country: String) -> [Jumio.Document.Digital]
    override public func finish()
    @objc deinit
  }
}
extension Jumio.Theme {
  public struct Loading {
    public init()
    public var circlePlain: Value?
    public var loadingCircleGradientStart: Value?
    public var loadingCircleGradientEnd: Value?
    public var errorCircleGradientStart: Value?
    public var errorCircleGradientEnd: Value?
    public var circleIcon: Value?
  }
}
extension Jumio {
  public enum CameraFacing {
    case front
    case back
    public static func == (a: Jumio.Jumio.CameraFacing, b: Jumio.Jumio.CameraFacing) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class JumioViewController : UINavigationController {
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public var shouldAutorotate: Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var preferredStatusBarStyle: UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var supportedInterfaceOrientations: UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var preferredInterfaceOrientationForPresentation: UIInterfaceOrientation {
    @objc get
  }
  @available(iOS 5.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension Jumio {
  public typealias ViewController = JumioViewController
}
@available(iOS 13.0.0, *)
extension Jumio.ViewController : UIViewControllerRepresentable {
  public typealias UIViewControllerType = UINavigationController
  @_Concurrency.MainActor(unsafe) final public func makeUIViewController(context: Context) -> UINavigationController
  @_Concurrency.MainActor(unsafe) final public func updateUIViewController(_ uiViewController: UINavigationController, context: Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
}
extension Jumio {
  public enum RejectReason : String {
    case generic
    case blurry
    case digitalCopy
    case blackWhiteCopy
    case noDoc
    case glare
    case missingFront
    case missingBack
    case notReadable
    case missingPartDoc
    case damagedDocument
    case hiddenPartDoc
    case colorPhotocopy
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class JumioRejectView : UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Jumio.Reject {
  public typealias View = JumioRejectView
}
@available(iOS 13.0.0, *)
extension Jumio.Reject.View : UIViewRepresentable {
  @_Concurrency.MainActor(unsafe) final public func makeUIView(context: Context) -> some UIView
  
  @_Concurrency.MainActor(unsafe) final public func updateUIView(_ uiView: UIViewType, context: Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewType = @_opaqueReturnTypeOf("$s5Jumio0A10RejectViewC10makeUIView7contextQr7SwiftUI0E20RepresentableContextVyACG_tF", 0) __
}
extension Jumio.Confirmation {
  public class Handler {
    public var parts: [Jumio.Credential.Part] {
      get
    }
    public init()
    public func attach(scanPart: Jumio.Scan.Part)
    public func renderPart(part: Jumio.Credential.Part, view: Jumio.Confirmation.View)
    public func retake()
    public func confirm()
    @objc deinit
  }
}
extension Jumio.Theme {
  public struct Bubble {
    public init()
    public var background: Value?
    public var foreground: Value?
    public var backgroundSelected: Value?
    public var circleItemBackground: Value?
    public var circleItemForeground: Value?
    public var selectionIconForeground: Value?
  }
  public struct SearchBubble {
    public init()
    public var background: Value?
    public var foreground: Value?
    public var listItemSelected: Value?
  }
}
public protocol JumioDefaultUIDelegate : AnyObject {
  func jumio(sdk: Jumio.SDK, finished result: Jumio.Result)
}
extension Jumio {
  public typealias DefaultUIDelegate = JumioDefaultUIDelegate
}
extension Jumio.Credential {
  public enum Part {
    case front
    case back
    case face
    case nfc
    case deviceRisk
    case document
    case multipart
    case digital
    public static func == (a: Jumio.Jumio.Credential.Part, b: Jumio.Jumio.Credential.Part) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public protocol JumioDynamicDocFinder : AnyObject {
  init()
  static var version: String { get }
  func setupDocFinder(data: Data)
  func setupDocClassifier(data: Data)
  func processDocFinder(data: Any) -> Any?
  func processDocClassifier(data: Any) -> Any?
  func clean()
}
extension Jumio.Dynamic {
  public typealias DocFinder = JumioDynamicDocFinder
}
public enum JumioIProovStatus {
  case connecting
  case connected
  case processing
  case success(UIImage?)
  case cancelled
  case failure(UIImage?, Int)
  case error(Int)
}
public protocol JumioDynamicLiveness : AnyObject {
  init()
  static var version: String { get }
  func setupLiveness(assets: Data, response: (([String : Any]) -> Void)?)
  func processLiveness(data: Any, width: Int32, height: Int32, timestamp: Int64)
  func clean()
}
extension Jumio.Dynamic {
  public typealias Liveness = JumioDynamicLiveness
}
extension Jumio.Reject {
  public class Handler {
    public var parts: [Jumio.Credential.Part] {
      get
    }
    public init()
    public func attach(scanPart: Jumio.Scan.Part)
    public func renderPart(part: Jumio.Credential.Part, view: Jumio.Reject.View)
    public func retake()
    @objc deinit
  }
}
extension Jumio.Scan {
  @_hasMissingDesignatedInitializers public class Part {
    weak public var delegate: Delegate? {
      get
    }
    public var scanMode: Mode {
      get
    }
    public var hasFallback: Bool {
      get
    }
    public func start()
    public func retry(reason: Jumio.Retry.Reason)
    public func fallback()
    public func cancel()
    public func finish()
    public func getHelpAnimation() -> UIView?
    @objc deinit
  }
}
extension Jumio {
  public struct Acquire {
    public enum Mode : String {
      case camera
      case file
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
  }
}
@objc @_Concurrency.MainActor(unsafe) final public class JumioDigitalIdentityView : UIView {
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: NSCoder)
  @_Concurrency.MainActor(unsafe) final public func attach(scanPart: Jumio.Scan.Part)
  @objc deinit
}
@available(iOS 13.0.0, *)
extension Jumio.DigitalIdentity.View : UIViewRepresentable {
  @_Concurrency.MainActor(unsafe) final public func makeUIView(context: Context) -> some UIView
  
  @_Concurrency.MainActor(unsafe) final public func updateUIView(_ uiView: UIViewType, context: Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewType = @_opaqueReturnTypeOf("$s5Jumio0A19DigitalIdentityViewC10makeUIView7contextQr7SwiftUI0F20RepresentableContextVyACG_tF", 0) __
}
extension Jumio {
  @objc @_inheritsConvenienceInitializers public class CredentialResult : NSObject {
    public var imageData: ImageData? {
      get
    }
    public var extractionMode: Scan.Mode? {
      get
    }
    @objc override dynamic public init()
    @objc deinit
  }
}
extension Jumio {
  public struct ConsentItem {
    public let id: String
    public let url: String
    public let text: String
    public var attributedText: NSAttributedString?
    public let type: ConsentType
  }
  public enum ConsentType {
    case active
    case passive
    public static func == (a: Jumio.Jumio.ConsentType, b: Jumio.Jumio.ConsentType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension Jumio {
  @objc @_inheritsConvenienceInitializers public class IDResult : CredentialResult {
    public var issuingCountry: String? {
      get
    }
    public var idType: String? {
      get
    }
    public var firstName: String? {
      get
    }
    public var lastName: String? {
      get
    }
    public var dateOfBirth: String? {
      get
    }
    public var issuingDate: String? {
      get
    }
    public var expiryDate: String? {
      get
    }
    public var documentNumber: String? {
      get
    }
    public var personalNumber: String? {
      get
    }
    public var gender: String? {
      get
    }
    public var nationality: String? {
      get
    }
    public var placeOfBirth: String? {
      get
    }
    public var country: String? {
      get
    }
    public var address: String? {
      get
    }
    public var city: String? {
      get
    }
    public var subdivision: String? {
      get
    }
    public var postalCode: String? {
      get
    }
    public var mrzLine1: String? {
      get
    }
    public var mrzLine2: String? {
      get
    }
    public var mrzLine3: String? {
      get
    }
    @available(*, deprecated, message: "This property will be removed in 4.8.0")
    public var rawBarcodeData: String? {
      get
    }
    @objc override dynamic public init()
    @objc deinit
  }
}
@_inheritsConvenienceInitializers @objc public class JumioSDK : NSObject {
  @objc public static var sdkVersion: String {
    @objc get
  }
  @objc public var dataCenter: JumioDataCenter {
    @objc get
    @objc set
  }
  @objc public var token: String {
    @objc get
    @objc set
  }
  @objc weak public var defaultUIDelegate: JumioDefaultUIDelegateObjC?
  @objc override dynamic public init()
  @objc public func startDefaultUI()
  @objc(giveDataDogConsentWithEnabled:) public func giveDataDogConsent(enabled: Bool)
  @objc(handleDeeplinkWithURL:) public static func handleDeeplinkURL(url: URL) -> Bool
  @objc(viewControllerOrError:) public func viewController() throws -> Jumio.ViewController
  @objc deinit
}
@objc(JumioDefaultUIDelegate) public protocol JumioDefaultUIDelegateObjC {
  @objc func jumioSDK(_ sdk: JumioSDK, finished: JumioResult)
}
@objc(JumioError) public class ObjCJumioError : NSObject {
  @objc final public let code: String
  @objc final public let message: String
  @objc final public let domain: String
  @objc final public let isRetryable: Bool
  @objc public init(code: String, message: String, domain: String, isRetryable: Bool)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(JumioConfirmation) public class ObjCJumioConfirmation : NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(JumioInformation) public class ObjCJumioInformation : NSObject {
  @objc final public let view: UIView?
  @objc final public let error: ObjCJumioError?
  @objc final public let confirmation: ObjCJumioConfirmation?
  @objc deinit
}
@objc public enum JumioDataCenter : Int {
  case EU = 0
  case US = 1
  case SG = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum JumioCredentialCategory : Int {
  case id = 0
  case face = 1
  case document = 2
  case data = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class JumioCredentialInfo : NSObject {
  @objc final public let category: JumioCredentialCategory
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class JumioIDResult : NSObject {
  @objc final public let issuingCountry: String?
  @objc final public let idType: String?
  @objc final public let firstName: String?
  @objc final public let lastName: String?
  @objc final public let dateOfBirth: String?
  @objc final public let issuingDate: String?
  @objc final public let expiryDate: String?
  @objc final public let documentNumber: String?
  @objc final public let personalNumber: String?
  @objc final public let gender: String?
  @objc final public let nationality: String?
  @objc final public let placeOfBirth: String?
  @objc final public let country: String?
  @objc final public let address: String?
  @objc final public let city: String?
  @objc final public let subdivision: String?
  @objc final public let postalCode: String?
  @objc final public let mrzLine1: String?
  @objc final public let mrzLine2: String?
  @objc final public let mrzLine3: String?
  @available(*, deprecated, message: "This property will be removed in 4.8.0")
  @objc final public let rawBarcodeData: String?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class JumioFaceResult : NSObject {
  @objc final public let passed: Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class JumioResult : NSObject {
  @objc final public let isSuccess: Bool
  @objc final public let credentialInfos: [JumioCredentialInfo]
  @objc final public let workflowExecutionId: String?
  @objc final public let accountId: String?
  @objc final public let error: ObjCJumioError?
  @objc public func getIDResult(of credentialInfo: JumioCredentialInfo) -> JumioIDResult?
  @objc public func getFaceResult(of credentialInfo: JumioCredentialInfo) -> JumioFaceResult?
  @objc deinit
}
extension Jumio {
  public struct DigitalIdentity {
    public typealias View = JumioDigitalIdentityView
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class JumioConfirmationView : UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Jumio.Confirmation {
  public typealias View = JumioConfirmationView
}
@available(iOS 13.0.0, *)
extension JumioConfirmationView : UIViewRepresentable {
  @_Concurrency.MainActor(unsafe) final public func makeUIView(context: Context) -> some UIView
  
  @_Concurrency.MainActor(unsafe) final public func updateUIView(_ uiView: UIViewType, context: Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewType = @_opaqueReturnTypeOf("$s5Jumio0A16ConfirmationViewC10makeUIView7contextQr7SwiftUI0E20RepresentableContextVyACG_tF", 0) __
}
extension Jumio {
  @objc @_inheritsConvenienceInitializers public class FaceResult : CredentialResult {
    public var passed: Bool? {
      get
    }
    @objc override dynamic public init()
    @objc deinit
  }
}
extension Jumio {
  public struct Dynamic {
  }
}
extension Jumio {
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class FaceCredential : Credential {
    public func initScanPart(scanPartDelegate: Jumio.Scan.Part.Delegate) -> Jumio.Scan.Part?
    @objc deinit
  }
}
extension Jumio.Theme {
  public struct PrimaryButton {
    public init()
    public var background: Value?
    public var backgroundPressed: Value?
    public var backgroundDisabled: Value?
    public var foreground: Value?
    public var foregroundPressed: Value?
    public var foregroundDisabled: Value?
    @available(*, deprecated, renamed: "Jumio.Theme.PrimaryButton.foreground")
    public var text: Value?
  }
  public struct SecondaryButton {
    public init()
    public var background: Value?
    public var backgroundPressed: Value?
    public var backgroundDisabled: Value?
    public var foreground: Value?
    @available(*, deprecated, renamed: "Jumio.Theme.SecondaryButton.foreground")
    public var text: Value?
  }
}
extension Jumio {
  public struct Reject {
  }
}
public struct Jumio {
}
extension Jumio {
  @objc @_inheritsConvenienceInitializers public class SDK : NSObject {
    public static var version: String {
      get
    }
    public static var isJailbroken: Bool {
      get
    }
    public var dataCenter: Jumio.DataCenter?
    public var token: String
    weak public var defaultUIDelegate: DefaultUIDelegate?
    @objc override dynamic public init()
    public func viewController() throws -> Jumio.ViewController
    public func startDefaultUI()
    public func start(_ delegate: Jumio.Controller.Delegate) -> Jumio.Controller
    public func customize(theme: Jumio.Theme)
    @available(*, deprecated, message: "This method will be removed in 4.8.0")
    public func giveDataDogConsent(enabled: Bool)
    public static func handleDeeplinkURL(_ url: URL) -> Bool
    @objc deinit
  }
}
extension Jumio {
  @_hasMissingDesignatedInitializers public class Result {
    public var workflowExecutionId: String? {
      get
    }
    public var accountId: String? {
      get
    }
    public var isSuccess: Bool {
      get
    }
    public var credentialInfos: [Jumio.Credential.Info] {
      get
    }
    public var error: Jumio.Error? {
      get
    }
    public func getIDResult(of credentialInfo: Jumio.Credential.Info) -> IDResult?
    public func getFaceResult(of credentialInfo: Jumio.Credential.Info) -> FaceResult?
    public func getResult(of credentialInfo: Jumio.Credential.Info) -> CredentialResult?
    @objc deinit
  }
}
extension Jumio {
  @_hasMissingDesignatedInitializers public class ImageData {
    public var images: [Credential.Part : UIImage] {
      get
    }
    public func has(part: Credential.Part) -> Bool
    public func clear()
    @objc deinit
  }
}
public protocol JumioDynamicMonitoring : AnyObject {
  init()
  static var version: String { get }
  func run(clientID: String, appID: String, sessionSampleRate: Float, attributes: [String : String])
  func reportRequest(id: String, url: String, size: Int, method: String)
  func reportResponse(id: String, size: Int?, statusCode: Int, error: Error?, response: URLResponse?)
  func reportViewStart(view: String)
  func reportViewStop(view: String)
}
extension Jumio.Dynamic {
  public typealias Monitoring = JumioDynamicMonitoring
}
extension Jumio.Credential {
  public struct Info {
    public var category: Category {
      get
    }
    public var id: String {
      get
    }
  }
}
extension Jumio {
  @_hasMissingDesignatedInitializers public class ISOCountryConverter {
    public class func toAlpha2(_ code: String) -> String?
    public class func toAlpha3(_ code: String) -> String?
    @objc deinit
  }
}
extension Jumio {
  public struct Retry {
  }
}
extension Jumio.Retry {
  @_hasMissingDesignatedInitializers public class Reason {
    public var message: String {
      get
    }
    public var code: Int {
      get
    }
    @objc deinit
  }
}
extension Jumio.Retry.Reason {
  public enum Generic : Int {
    case generic
    case userCancel
    case attemptFailed
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension Jumio.Retry.Reason {
  public enum iProov : Int {
    case unknown
    case tooMuchMovement
    case lightingTooBright
    case lightingTooDark
    case faceMisaligned
    case eyesClosed
    case faceTooFar
    case faceTooClose
    case sunglasses
    case obscuredFace
    case userTimeout
    case deviceNotSupported
    case cameraPermission
    case captureAlreadyActive
    case unexpected
    case server
    case network
    case genericError
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension Jumio.Retry.Reason {
  public enum NFC : Int {
    case bacError
    case tagLost
    case userCancelled
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension Jumio.Retry.Reason {
  public enum DocumentVerification : Int {
    case notReadable
    case encrypted
    case pageLimit
    case sizeLimit
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension Jumio.Retry.Reason {
  public enum DigitalIdentity : Int {
    case unknown
    case expired
    case thirdPartyVerificationError
    case serviceError
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension Jumio {
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DocumentCredential : Credential {
    final public let acquireModes: [Jumio.Acquire.Mode]
    public func isSupportedConfiguration(acquireMode: Jumio.Acquire.Mode) -> Bool
    public func setConfiguration(acquireMode: Jumio.Acquire.Mode)
    @objc deinit
  }
}
extension Jumio {
  public typealias Document = JumioDocument
}
public protocol JumioDocument {
}
extension Jumio {
  @_hasMissingDesignatedInitializers public class Credential {
    public var parts: [Jumio.Credential.Part] {
      get
    }
    public var isConfigured: Bool {
      get
    }
    public var isComplete: Bool {
      get
    }
    public func initScanPart(_ credentialPart: Jumio.Credential.Part, scanPartDelegate: Jumio.Scan.Part.Delegate) -> Jumio.Scan.Part?
    public func getAddonScanPart(scanPartDelegate: Jumio.Scan.Part.Delegate) -> Jumio.Scan.Part?
    public func cancel()
    public func finish()
    @objc deinit
  }
}
public protocol JumioControllerDelegate : AnyObject {
  func jumio(controller: Jumio.Controller, didInitializeWith credentialInformations: [Jumio.Credential.Info], consentItems: [Jumio.ConsentItem]?)
  func jumio(controller: Jumio.Controller, error: Jumio.Error)
  func jumio(controller: Jumio.Controller, finished result: Jumio.Result)
  func jumio(controller: Jumio.Controller, logicalError: Jumio.LogicalError)
}
extension Jumio.Controller {
  public typealias Delegate = JumioControllerDelegate
}
extension Jumio {
  public struct DigitalDocument : CustomDebugStringConvertible, Equatable, Jumio.Document {
    public var debugDescription: String {
      get
    }
    public var type: String {
      get
    }
    public var title: String {
      get
    }
    public static func == (lhs: DigitalDocument, rhs: DigitalDocument) -> Bool
  }
}
extension Jumio.Document {
  public typealias Digital = Jumio.DigitalDocument
}
extension Jumio.Theme {
  public struct NFC {
    public init()
    public var passportCover: Value?
    public var passportPageDark: Value?
    public var passportPageLight: Value?
    public var passportForeground: Value?
    public var phoneCover: Value?
  }
}
extension Jumio {
  public enum DataCenter : Int {
    case EU
    case US
    case SG
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension Jumio.Theme {
  public struct ScanHelp {
    public init()
    public var faceAnimationForeground: Value?
    @available(*, deprecated, message: "This property will be removed in 4.8.0")
    public var faceAnimationBackground: Value?
  }
}
public protocol JumioScanPartDelegate : AnyObject {
  func jumio(scanPart: Jumio.Scan.Part, updates update: Jumio.Scan.Update, data: Any?)
  func jumio(scanPart: Jumio.Scan.Part, step: Jumio.Scan.Step, data: Any?)
}
extension Jumio.Scan.Part {
  public typealias Delegate = JumioScanPartDelegate
}
public protocol JumioDynamicDeviceRisk : AnyObject {
  init()
  static var version: String { get }
  func initiate(with clientId: String, and sessionKey: String)
  func obtainData(successCompletion: ((Bool) -> Void)?)
}
extension Jumio.Dynamic {
  public typealias DeviceRisk = JumioDynamicDeviceRisk
}
public struct JumioIProovOptions {
  public var closeButtonImage: UIImage?
  public var filterForegroundColor: UIColor
  public var filterBackgroundColor: UIColor
  public var titleTextColor: UIColor
  public var closeButtonTintColor: UIColor
  public var surroundColor: UIColor
  public var promptTextColor: UIColor
  public var promptBackgroundColor: UIColor
  public var genuinePresenceAssuranceReadyOvalStrokeColor: UIColor
  public var genuinePresenceAssuranceNotReadyOvalStrokeColor: UIColor
  public var livenessAssuranceOvalStrokeColor: UIColor
  public var livenessAssuranceCompletedOvalStrokeColor: UIColor
  public var promptRoundedCorners: Bool
  public var stringsBundle: Bundle?
  public var stringsTable: String
  public var productTypeGPA: Bool
}
extension Jumio.Theme {
  public struct ScanOverlay {
    public init()
    public var scanOverlay: Value?
    public var fill: Value?
    public var scanOverlayTransparent: Value?
    public var scanBackground: Value?
    public var livenessStroke: Value?
    public var livenessStrokeAnimation: Value?
    public var livenessStrokeAnimationCompleted: Value?
  }
}
extension Jumio {
  public struct FileRequirements {
    public var mimeTypes: [String]
    public var maxFileSize: Int
    public var pdfMaxPages: Int
  }
}
extension Jumio.Theme {
  public struct ScanView {
    public init()
    public var foreground: Value?
    public var darkForeground: Value?
    public var bubbleBackground: Value?
    public var bubbleForeground: Value?
    @available(*, deprecated, renamed: "documentShutter")
    public var shutter: Value?
    public var documentShutter: Value?
    public var faceShutter: Value?
  }
}
extension Jumio {
  @_hasMissingDesignatedInitializers public class Controller {
    weak public var delegate: Jumio.Controller.Delegate? {
      get
    }
    public var isComplete: Bool {
      get
    }
    public func cancel()
    public func finish()
    public func start(credentialInfo: Jumio.Credential.Info) -> Jumio.Credential?
    public func retry(error: Jumio.Error)
    public func userConsented(to consentItem: Jumio.ConsentItem, decision: Bool)
    public func getUnconsentedItems() -> [Jumio.ConsentItem]?
    @objc deinit
  }
}
extension Jumio {
  public struct Error {
    public var message: String {
      get
    }
    public var code: String {
      get
    }
    public var domain: String {
      get
    }
    public var isRetryable: Bool {
      get
    }
  }
  public enum SetupError : Swift.Error {
    case requestedViewControllerForCustomUI
    case standardViewControllerNotAvailable
    public static func == (a: Jumio.Jumio.SetupError, b: Jumio.Jumio.SetupError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum LogicalError : Swift.Error {
    case dependencyWrongVersion
    case noDataCenterSet
    case deadController
    case errorNotRetryable
    case needToConsentFirst
    case controllerNotCompleted
    case isBeingFinished
    case multipleCredentials
    case unknownCredential
    case deadCredential
    case credentialNotCompleted
    case multipleScanParts
    case unknownScanPart
    case scanPartNotCompleted
    case deadScanPart
    case noFallbackAvailable
    case takePictureNotAllowed
    case docFinderModelCorrupted
    case classifierModelCorrupted
    case livenessAssetsCorrupted
    public static func == (a: Jumio.Jumio.LogicalError, b: Jumio.Jumio.LogicalError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension Jumio {
  public struct PhysicalDocument : CustomDebugStringConvertible, Equatable, Jumio.Document {
    public enum DocumentType : String, CaseIterable {
      case passport
      case visa
      case drivingLicense
      case identityCard
      public init?(rawValue: Swift.String)
      public typealias AllCases = [Jumio.Jumio.PhysicalDocument.DocumentType]
      public typealias RawValue = Swift.String
      public static var allCases: [Jumio.Jumio.PhysicalDocument.DocumentType] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public enum DocumentVariant : String {
      case plastic
      case paper
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var debugDescription: String {
      get
    }
    public var type: DocumentType {
      get
    }
    public var variant: DocumentVariant {
      get
    }
    public static func == (lhs: PhysicalDocument, rhs: PhysicalDocument) -> Bool
  }
}
extension Jumio.Document {
  public typealias Physical = Jumio.PhysicalDocument
}
extension Jumio.Credential {
  public enum Category {
    case id
    case face
    case document
    case data
    public static func == (a: Jumio.Jumio.Credential.Category, b: Jumio.Jumio.Credential.Category) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension Jumio {
  public class FileAttacher {
    public var fileRequirements: Jumio.FileRequirements? {
      get
    }
    public init()
    public func attach(scanPart: Jumio.Scan.Part)
    public func set(url: URL)
    @objc deinit
  }
}
extension Jumio {
  public struct Confirmation {
  }
}
extension Jumio.Theme {
  public struct IProov {
    public init()
    @available(*, deprecated, renamed: "Jumio.Theme.ScanHelp.faceAnimationForeground")
    public var animationForeground: Value?
    @available(*, deprecated, message: "This property will be removed in 4.8.0")
    public var animationBackground: Value?
    public var filterForegroundColor: Value?
    public var filterBackgroundColor: Value?
    public var titleTextColor: Value?
    public var closeButtonTintColor: Value?
    public var surroundColor: Value?
    public var promptTextColor: Value?
    public var promptBackgroundColor: Value?
    public var promptRoundedCorners: Bool?
    public var genuinePresenceAssuranceReadyOvalStrokeColor: Value?
    public var genuinePresenceAssuranceNotReadyOvalStrokeColor: Value?
    public var livenessAssuranceOvalStrokeColor: Value?
    public var livenessAssuranceCompletedOvalStrokeColor: Value?
  }
}
@objc @_Concurrency.MainActor(unsafe) final public class JumioScanView : UIView {
  @_Concurrency.MainActor(unsafe) final public var isShutterEnabled: Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var isSwitchEnabled: Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var hasFlash: Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var cameraFacing: Jumio.CameraFacing
  @_Concurrency.MainActor(unsafe) final public var flash: Bool
  @_Concurrency.MainActor(unsafe) final public var extraction: Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: NSCoder)
  @_Concurrency.MainActor(unsafe) final public func attach(scanPart: Jumio.Scan.Part)
  @_Concurrency.MainActor(unsafe) final public func takePicture()
  @_Concurrency.MainActor(unsafe) final public func switchCamera()
  @_Concurrency.MainActor(unsafe) final public func resume()
  @_Concurrency.MainActor(unsafe) final public func pause()
  @_Concurrency.MainActor(unsafe) final public func startExtraction()
  @_Concurrency.MainActor(unsafe) final public func stopExtraction(hidePreview: Bool)
  @objc deinit
}
extension Jumio.Scan {
  public typealias View = JumioScanView
}
@available(iOS 13.0.0, *)
extension Jumio.Scan.View : UIViewRepresentable {
  @_Concurrency.MainActor(unsafe) final public func makeUIView(context: Context) -> some UIView
  
  @_Concurrency.MainActor(unsafe) final public func updateUIView(_ uiView: UIViewType, context: Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewType = @_opaqueReturnTypeOf("$s5Jumio0A8ScanViewC10makeUIView7contextQr7SwiftUI0E20RepresentableContextVyACG_tF", 0) __
}
extension Jumio {
  public struct Scan {
    public enum Mode {
      case manual
      case faceManual
      case barcode
      case nfc
      case faceIProov
      case deviceRisk
      case docFinder
      case file
      case web
      case liveness
      public static func == (a: Jumio.Jumio.Scan.Mode, b: Jumio.Jumio.Scan.Mode) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public enum Update : Equatable {
      case fallback(FallbackReason)
      @available(*, deprecated, message: "This case is no longer used and will be removed in future SDK update")
      case legalHint
      case nfcExtractionStarted
      case nfcExtractionProgress
      case nfcExtractionFinished
      case extractionState(ExtractionState)
      public enum ExtractionState {
        case centerId
        case centerFace
        case tooClose
        case faceTooClose
        case moveCloser
        case moveFaceCloser
        case levelEyesAndDevice
        case holdStraight
        case holdStill
        public static func == (a: Jumio.Jumio.Scan.Update.ExtractionState, b: Jumio.Jumio.Scan.Update.ExtractionState) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public enum FallbackReason {
        case userAction
        case lowPerformance
        case noDetection
        public static func == (a: Jumio.Jumio.Scan.Update.FallbackReason, b: Jumio.Jumio.Scan.Update.FallbackReason) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public static func == (a: Jumio.Jumio.Scan.Update, b: Jumio.Jumio.Scan.Update) -> Swift.Bool
    }
    public enum Step {
      case prepare
      case started
      case scanView
      case digitalIdentityView
      case thirdPartyVerification
      case attachFile
      case imageTaken
      case processing
      case confirmationView
      case rejectView
      case retry
      case canFinish
      case addonScanPart
      case nextPart
      public static func == (a: Jumio.Jumio.Scan.Step, b: Jumio.Jumio.Scan.Step) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
  }
}
public protocol JumioDynamicIProov : AnyObject {
  init()
  func startIProov(token: String, url: String, options: JumioIProovOptions, callback: ((JumioIProovStatus) -> Void)?)
  static var version: String { get }
  static var iProovVersion: String { get }
}
extension Jumio.Dynamic {
  public typealias IProov = JumioDynamicIProov
}
extension Jumio.Theme {
  public struct Confirmation {
    public init()
    public var imageBackground: Value?
    public var imageBackgroundBorder: Value?
    public var indicatorActive: Value?
    public var indicatorDefault: Value?
  }
}
extension Jumio.Jumio.CameraFacing : Swift.Equatable {}
extension Jumio.Jumio.CameraFacing : Swift.Hashable {}
extension Jumio.Jumio.RejectReason : Swift.Equatable {}
extension Jumio.Jumio.RejectReason : Swift.Hashable {}
extension Jumio.Jumio.RejectReason : Swift.RawRepresentable {}
extension Jumio.Jumio.Credential.Part : Swift.Equatable {}
extension Jumio.Jumio.Credential.Part : Swift.Hashable {}
extension Jumio.Jumio.Acquire.Mode : Swift.Equatable {}
extension Jumio.Jumio.Acquire.Mode : Swift.Hashable {}
extension Jumio.Jumio.Acquire.Mode : Swift.RawRepresentable {}
extension Jumio.Jumio.ConsentType : Swift.Equatable {}
extension Jumio.Jumio.ConsentType : Swift.Hashable {}
extension Jumio.JumioDataCenter : Swift.Equatable {}
extension Jumio.JumioDataCenter : Swift.Hashable {}
extension Jumio.JumioDataCenter : Swift.RawRepresentable {}
extension Jumio.Jumio.DataCenter : Swift.Equatable {}
extension Jumio.Jumio.DataCenter : Swift.Hashable {}
extension Jumio.Jumio.DataCenter : Swift.RawRepresentable {}
extension Jumio.JumioCredentialCategory : Swift.Equatable {}
extension Jumio.JumioCredentialCategory : Swift.Hashable {}
extension Jumio.JumioCredentialCategory : Swift.RawRepresentable {}
extension Jumio.Jumio.Credential.Category : Swift.Equatable {}
extension Jumio.Jumio.Credential.Category : Swift.Hashable {}
extension Jumio.Jumio.Retry.Reason.Generic : Swift.Equatable {}
extension Jumio.Jumio.Retry.Reason.Generic : Swift.Hashable {}
extension Jumio.Jumio.Retry.Reason.Generic : Swift.RawRepresentable {}
extension Jumio.Jumio.Retry.Reason.iProov : Swift.Equatable {}
extension Jumio.Jumio.Retry.Reason.iProov : Swift.Hashable {}
extension Jumio.Jumio.Retry.Reason.iProov : Swift.RawRepresentable {}
extension Jumio.Jumio.Retry.Reason.NFC : Swift.Equatable {}
extension Jumio.Jumio.Retry.Reason.NFC : Swift.Hashable {}
extension Jumio.Jumio.Retry.Reason.NFC : Swift.RawRepresentable {}
extension Jumio.Jumio.Retry.Reason.DocumentVerification : Swift.Equatable {}
extension Jumio.Jumio.Retry.Reason.DocumentVerification : Swift.Hashable {}
extension Jumio.Jumio.Retry.Reason.DocumentVerification : Swift.RawRepresentable {}
extension Jumio.Jumio.Retry.Reason.DigitalIdentity : Swift.Equatable {}
extension Jumio.Jumio.Retry.Reason.DigitalIdentity : Swift.Hashable {}
extension Jumio.Jumio.Retry.Reason.DigitalIdentity : Swift.RawRepresentable {}
extension Jumio.Jumio.SetupError : Swift.Equatable {}
extension Jumio.Jumio.SetupError : Swift.Hashable {}
extension Jumio.Jumio.LogicalError : Swift.Equatable {}
extension Jumio.Jumio.LogicalError : Swift.Hashable {}
extension Jumio.Jumio.PhysicalDocument.DocumentType : Swift.Equatable {}
extension Jumio.Jumio.PhysicalDocument.DocumentType : Swift.Hashable {}
extension Jumio.Jumio.PhysicalDocument.DocumentType : Swift.RawRepresentable {}
extension Jumio.Jumio.PhysicalDocument.DocumentVariant : Swift.Equatable {}
extension Jumio.Jumio.PhysicalDocument.DocumentVariant : Swift.Hashable {}
extension Jumio.Jumio.PhysicalDocument.DocumentVariant : Swift.RawRepresentable {}
extension Jumio.Jumio.Scan.Mode : Swift.Equatable {}
extension Jumio.Jumio.Scan.Mode : Swift.Hashable {}
extension Jumio.Jumio.Scan.Update.ExtractionState : Swift.Equatable {}
extension Jumio.Jumio.Scan.Update.ExtractionState : Swift.Hashable {}
extension Jumio.Jumio.Scan.Update.FallbackReason : Swift.Equatable {}
extension Jumio.Jumio.Scan.Update.FallbackReason : Swift.Hashable {}
extension Jumio.Jumio.Scan.Step : Swift.Equatable {}
extension Jumio.Jumio.Scan.Step : Swift.Hashable {}
